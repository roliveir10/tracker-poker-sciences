// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------

enum ImportStatus {
  queued
  processing
  done
  failed
}

enum Street {
  preflop
  flop
  turn
  river
}

enum ActionType {
  fold
  check
  call
  bet
  raise
  push
}

// ---------- Auth.js Models ----------

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  // Domain relations
  imports       Import[]
  tournaments   Tournament[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- Domain Models ----------

model Import {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status       ImportStatus @default(queued)
  fileKey      String
  numHands     Int          @default(0)
  error        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  completedAt  DateTime?

  tournaments  Tournament[]

  @@index([userId])
  @@index([status])
}

model Tournament {
  id               String    @id @default(cuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  importId         String?
  import           Import?   @relation(fields: [importId], references: [id], onDelete: SetNull)
  room             String    @default("betclic")
  gameId           String
  startedAt        DateTime
  buyInCents       Int
  rakeCents        Int       @default(0)
  prizePoolCents   Int       @default(0)
  prizeMultiplier  Float
  heroResultPosition Int?
  profitCents      Int       @default(0)
  createdAt        DateTime  @default(now())

  hands            Hand[]

  @@index([userId])
  @@index([importId])
  @@index([startedAt])
  @@unique([userId, gameId])
}

model Hand {
  id           String    @id @default(cuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  handNo       String?
  heroSeat     Int?
  sbCents      Int?
  bbCents      Int?
  dealtCards   String?   // e.g., "As Ks"
  board        String?   // final board e.g., "2h 9d Kc | 7s | 7d"
  boardFlop    String?
  boardTurn    String?
  boardRiver   String?
  winnerSeat   Int?
  playedAt     DateTime?
  createdAt    DateTime  @default(now())
  totalPotCents Int?
  mainPotCents  Int?
  evRealizedCents Int?
  evAllInAdjCents Int?
  evSamples   Int     @default(0)
  evUpdatedAt DateTime?

  actions      Action[]
  players      HandPlayer[]

  @@index([tournamentId])
}

model Action {
  id        String     @id @default(cuid())
  handId    String
  hand      Hand       @relation(fields: [handId], references: [id], onDelete: Cascade)
  street    Street
  seat      Int
  type      ActionType
  sizeCents Int?       // null for fold/check
  isAllIn   Boolean    @default(false)
  orderNo   Int

  @@index([handId])
  @@index([street])
}

model HandPlayer {
  id      String  @id @default(cuid())
  handId  String
  hand    Hand    @relation(fields: [handId], references: [id], onDelete: Cascade)
  seat    Int
  name    String
  // 2-card notation e.g., "As Ks" if revealed (null otherwise)
  hole    String?
  startingStackCents Int?
  isHero Boolean @default(false)

  @@index([handId])
  @@unique([handId, seat])
}
